{"ast":null,"code":"import _classCallCheck from \"/Users/benjaminclevenger/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benjaminclevenger/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benjaminclevenger/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benjaminclevenger/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benjaminclevenger/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/benjaminclevenger/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      this.props.fetchStream(id);\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildPlayer();\n    }\n  }, {\n    key: \"buildPlayer\",\n    value: function buildPlayer() {\n      if (this.player || !this.props.stream) {\n        return;\n      }\n\n      var id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownprops) {\n  return {\n    stream: state.streams[ownprops.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/benjaminclevenger/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","props","videoRef","createRef","id","match","params","buildPlayer","player","stream","createPlayer","type","url","attachMediaElement","current","load","title","description","width","Component","mapStateToProps","state","ownprops","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,eAA1B;;IAEMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AAEA,UAAKC,QAAL,GAAgBN,KAAK,CAACO,SAAN,EAAhB;AAHe;AAIlB;;;;wCACmB;AAAA,UACTC,EADS,GACH,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MADd,CACTF,EADS;AAGhB,WAAKH,KAAL,CAAWF,WAAX,CAAuBK,EAAvB;AACA,WAAKG,WAAL;AACH;;;yCAEoB;AACjB,WAAKA,WAAL;AACH;;;kCAEa;AACV,UAAI,KAAKC,MAAL,IAAe,CAAC,KAAKP,KAAL,CAAWQ,MAA/B,EAAuC;AACnC;AACH;;AAHS,UAIHL,EAJG,GAIG,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAJpB,CAIHF,EAJG;AAKV,WAAKI,MAAL,GAAcX,GAAG,CAACa,YAAJ,CAAiB;AAACC,QAAAA,IAAI,EAAE,KAAP;AAAcC,QAAAA,GAAG,uCAAgCR,EAAhC;AAAjB,OAAjB,CAAd;AACA,WAAKI,MAAL,CAAYK,kBAAZ,CAA+B,KAAKX,QAAL,CAAcY,OAA7C;AACA,WAAKN,MAAL,CAAYO,IAAZ;AACH;;;6BAEQ;AACL,UAAI,CAAC,KAAKd,KAAL,CAAWQ,MAAhB,EAAwB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH;;AAHI,+BAKwB,KAAKR,KAAL,CAAWQ,MALnC;AAAA,UAKEO,KALF,sBAKEA,KALF;AAAA,UAKSC,WALT,sBAKSA,WALT;AAML,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,GAAG,EAAE,KAAKf,QADd;AAEI,QAAA,KAAK,EAAE;AACPgB,UAAAA,KAAK,EAAE;AADA,SAFX;AAKI,QAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,KAAL,CAPJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CARJ,CADJ;AAYH;;;;EA7CoBrB,KAAK,CAACuB,S;;AAgD/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACzC,SAAO;AACHb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACjB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AADL,GAAP;AAGH,CAJD;;AAMA,eAAeN,OAAO,CAACsB,eAAD,EAAkB;AAACrB,EAAAA,WAAW,EAAXA;AAAD,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from 'react';\nimport flv from 'flv.js';\nimport {connect} from 'react-redux';\nimport {fetchStream} from '../../actions';\n\nclass StreamShow extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n    }\n    componentDidMount() {\n        const {id} = this.props.match.params;\n\n        this.props.fetchStream(id);\n        this.buildPlayer();\n    }\n\n    componentDidUpdate() {\n        this.buildPlayer();\n    }\n\n    buildPlayer() {\n        if (this.player || !this.props.stream) {\n            return;\n        }\n        const {id} = this.props.match.params;\n        this.player = flv.createPlayer({type: 'flv', url: `http://localhost:8000/live/${id}.flv`});\n        this.player.attachMediaElement(this.videoRef.current);\n        this.player.load();\n    }\n\n    render() {\n        if (!this.props.stream) {\n            return <div>Loading...</div>\n        }\n\n        const {title, description} = this.props.stream;\n        return (\n            <div>\n                <video\n                    ref={this.videoRef}\n                    style={{\n                    width: '100%'\n                }}\n                    controls/>\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownprops) => {\n    return {\n        stream: state.streams[ownprops.match.params.id]\n    };\n};\n\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);"]},"metadata":{},"sourceType":"module"}